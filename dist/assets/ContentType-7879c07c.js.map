{"version":3,"file":"ContentType-7879c07c.js","sources":["../../src/layouts/partials/Footer.tsx","../../src/views/ContentType.tsx"],"sourcesContent":["const Footer = () => {\r\n  return (\r\n    <footer className=\"mt-auto\">\r\n      <div className=\"footer\">854-cms</div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nimport Footer from \"layouts/partials/Footer\";\r\n\r\nimport { ContentBodySchema, ContentType, ID, schemaType } from \"types/common\";\r\nimport api from \"api/api_rtk\";\r\nimport { CreateBodySchemaDto } from \"types/dto\";\r\n\r\nimport useInitFetch from \"hooks/useInitFetch\";\r\nimport ContentTypeSelect from \"./components/ContentTypeSelect\";\r\n\r\nconst ContentTypeManage = () => {\r\n  const {\r\n    param: { contentTypeId, setcontentTypeId },\r\n    contentTypeList,\r\n  } = useInitFetch();\r\n\r\n  const [addContentTypeTrigger, addContentTypeResult] =\r\n    api.usePostContentTypeMutation();\r\n\r\n  const [deleteContentTypeTrigger, deleteContentTypeResult] =\r\n    api.useDeleteContentTypeMutation();\r\n\r\n  const [contentTypeDto, setContentTypeDto] = useState({\r\n    contentTypeName: \"\",\r\n  });\r\n\r\n  const onClickAddContentType = async () => {\r\n    const res = addContentTypeTrigger(contentTypeDto)\r\n      .then(() => {\r\n        alert(\"타입 추가 완료\");\r\n      })\r\n      .catch(() => {\r\n        alert(\"에러 발생\");\r\n      });\r\n  };\r\n\r\n  const onClickDeleteContentType = async () => {\r\n    if (\r\n      !contentTypeId ||\r\n      !confirm(\r\n        `해당 타입의 콘텐츠 전체가 삭제됩니다. ${\r\n          contentTypeList.findContentType(contentTypeId)?.contentTypeName\r\n        } 타입 진짜 삭제?`\r\n      )\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const res = await deleteContentTypeTrigger(contentTypeId)\r\n      .then(() => {\r\n        alert(\"타입 삭제 완료\");\r\n        setcontentTypeId(undefined);\r\n      })\r\n      .catch(() => {\r\n        alert(\"에러 발생\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      {/* Breadcrumb */}\r\n      <section className=\"breadcrumb\">\r\n        <h1>Content Type</h1>\r\n      </section>\r\n\r\n      <div>\r\n        <div className=\"grid\">\r\n          <fieldset>\r\n            {/* content type Select */}\r\n            <div>\r\n              <div className=\"flex items-center justify-between\">\r\n                <h3>콘텐츠 타입 선택</h3>\r\n                <button\r\n                  className={\"bg-error text-white\"}\r\n                  onClick={onClickDeleteContentType}\r\n                >\r\n                  삭제\r\n                </button>\r\n              </div>\r\n\r\n              <ContentTypeSelect\r\n                contentTypeId={contentTypeId}\r\n                setcontentTypeId={setcontentTypeId}\r\n                contentTypeList={\r\n                  contentTypeList.data ? contentTypeList.data : []\r\n                }\r\n              />\r\n            </div>\r\n          </fieldset>\r\n\r\n          <fieldset>\r\n            {/* content type Add */}\r\n            <div className=\"flex flex-row items-center justify-between\">\r\n              <span>콘텐츠 타입 이름</span>\r\n              <button onClick={onClickAddContentType}>콘텐츠 타입 추가</button>\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <input\r\n              value={contentTypeDto.contentTypeName}\r\n              onChange={(e) => {\r\n                setContentTypeDto({\r\n                  ...contentTypeDto,\r\n                  contentTypeName: e.currentTarget.value,\r\n                });\r\n              }}\r\n            ></input>\r\n          </fieldset>\r\n\r\n          <hr />\r\n\r\n          {contentTypeList && contentTypeId ? (\r\n            <FormBodyField contentTypeId={contentTypeId}></FormBodyField>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n\r\n      <Footer />\r\n    </main>\r\n  );\r\n};\r\n\r\nfunction FormBodyField(props: { contentTypeId: ID }) {\r\n  const { contentTypeId } = props;\r\n\r\n  const [contentTypeDetailTrigger, contentTypeDetailResult] =\r\n    api.useLazyGetContentTypeDetailQuery();\r\n\r\n  const [bodyFieldDeleteTrigger, bodyFieldDeleteResult] =\r\n    api.useDeleteBodySchemaMutation();\r\n\r\n  const [postBodyField, postBodyFieldResult] = api.usePostBodySchemaMutation();\r\n\r\n  const [postBodyFieldDto, setPostBodyFieldDto] = useState<CreateBodySchemaDto>(\r\n    {\r\n      contentTypeId: -1,\r\n      schemaName: \"\",\r\n      schemaType: \"text\",\r\n    }\r\n  );\r\n\r\n  /** FUNCTION */\r\n  const getContentTypeDetail = async (id: ID) => {\r\n    const res = await contentTypeDetailTrigger(id).unwrap();\r\n  };\r\n\r\n  const onClickDeleteBodyField = async (id: ID) => {\r\n    if (confirm(\"해당 필드의 데이터가 전부 삭제됩니다. 진짜 삭제?\")) {\r\n      const res = await bodyFieldDeleteTrigger(id);\r\n      getContentTypeDetail(contentTypeId);\r\n    }\r\n  };\r\n\r\n  const onClickAddField = async () => {\r\n    const body: CreateBodySchemaDto = {\r\n      ...postBodyFieldDto,\r\n      contentTypeId: Number(contentTypeId),\r\n    };\r\n\r\n    const res = await postBodyField(body);\r\n    getContentTypeDetail(contentTypeId);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getContentTypeDetail(contentTypeId);\r\n  }, [contentTypeId]);\r\n\r\n  return (\r\n    <fieldset>\r\n      {/* manage body field */}\r\n      <div>\r\n        {/* field table */}\r\n        {contentTypeDetailResult.isSuccess ? (\r\n          <h3>{contentTypeDetailResult.data.contentTypeName} 필드 관리</h3>\r\n        ) : null}\r\n        <div className=\"flex flex-row justify-center\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th className=\"text-center\">필드 타입</th>\r\n                <th className=\"text-center\">필드 명</th>\r\n                <th className=\"text-center\">&nbsp;</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {contentTypeDetailResult.isSuccess ? (\r\n                <>\r\n                  {contentTypeDetailResult.data.contentBodySchema.map(\r\n                    (elem: ContentBodySchema) => {\r\n                      return (\r\n                        <tr key={elem.schemaId}>\r\n                          <td>\r\n                            <div className=\"text-center\">{elem.schemaType}</div>{\" \"}\r\n                          </td>\r\n                          <td>\r\n                            <div className=\"text-center\">{elem.schemaName}</div>\r\n                          </td>\r\n                          <td>\r\n                            <button\r\n                              className=\"bg-danger text-center\"\r\n                              onClick={() => {\r\n                                onClickDeleteBodyField(elem.schemaId);\r\n                              }}\r\n                            >\r\n                              삭제\r\n                            </button>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    }\r\n                  )}\r\n                </>\r\n              ) : null}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <hr />\r\n\r\n        {contentTypeDetailResult.isSuccess ? (\r\n          <>\r\n            <p>{contentTypeDetailResult.data.contentTypeName} 타입 필드 추가</p>\r\n\r\n            {/* add field */}\r\n            <div className=\"flex flex-col\">\r\n              {/* schemaType 중 하나 */}\r\n              <div>\r\n                <input\r\n                  className=\"mb-4\"\r\n                  value={postBodyFieldDto.schemaName}\r\n                  onChange={(e) => {\r\n                    setPostBodyFieldDto({\r\n                      ...postBodyFieldDto,\r\n                      schemaName: e.currentTarget.value,\r\n                    });\r\n                  }}\r\n                ></input>\r\n\r\n                <div className=\"flex flex-row justify-between\">\r\n                  <div className=\"flex flex-row justify-between gap-4\">\r\n                    {([\"string\", \"text\"] as schemaType[]).map((elem) => {\r\n                      return (\r\n                        <button\r\n                          key={elem}\r\n                          className={`${\r\n                            postBodyFieldDto.schemaType === elem\r\n                              ? \"bg-primary\"\r\n                              : \"bg-gray-200\"\r\n                          } text-sm`}\r\n                          onClick={() => {\r\n                            setPostBodyFieldDto({\r\n                              ...postBodyFieldDto,\r\n                              schemaType: elem,\r\n                            });\r\n                          }}\r\n                        >\r\n                          {elem}\r\n                        </button>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                  <button className=\"bg-primary\" onClick={onClickAddField}>\r\n                    필드 추가\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </>\r\n        ) : null}\r\n      </div>\r\n    </fieldset>\r\n  );\r\n}\r\n\r\nexport default ContentTypeManage;\r\n"],"names":["Footer","jsx","ContentTypeManage","contentTypeId","setcontentTypeId","contentTypeList","useInitFetch","addContentTypeTrigger","addContentTypeResult","api","deleteContentTypeTrigger","deleteContentTypeResult","contentTypeDto","setContentTypeDto","useState","onClickAddContentType","onClickDeleteContentType","_a","jsxs","ContentTypeSelect","e","FormBodyField","props","contentTypeDetailTrigger","contentTypeDetailResult","bodyFieldDeleteTrigger","bodyFieldDeleteResult","postBodyField","postBodyFieldResult","postBodyFieldDto","setPostBodyFieldDto","getContentTypeDetail","id","onClickDeleteBodyField","onClickAddField","body","useEffect","Fragment","elem"],"mappings":"iHAAA,MAAMA,EAAS,IAEXC,EAAAA,IAAC,UAAO,UAAU,UAChB,eAAC,MAAI,CAAA,UAAU,SAAS,SAAA,SAAO,CAAA,CACjC,CAAA,ECOEC,EAAoB,IAAM,CACxB,KAAA,CACJ,MAAO,CAAE,cAAAC,EAAe,iBAAAC,CAAiB,EACzC,gBAAAC,GACEC,EAAa,EAEX,CAACC,EAAuBC,CAAoB,EAChDC,EAAI,2BAA2B,EAE3B,CAACC,EAA0BC,CAAuB,EACtDF,EAAI,6BAA6B,EAE7B,CAACG,EAAgBC,CAAiB,EAAIC,WAAS,CACnD,gBAAiB,EAAA,CAClB,EAEKC,EAAwB,SAAY,CAC5BR,EAAsBK,CAAc,EAC7C,KAAK,IAAM,CACV,MAAM,UAAU,CAAA,CACjB,EACA,MAAM,IAAM,CACX,MAAM,OAAO,CAAA,CACd,CAAA,EAGCI,EAA2B,SAAY,OAEzC,CAACb,GACD,CAAC,QACC,0BACEc,EAAAZ,EAAgB,gBAAgBF,CAAa,IAA7C,YAAAc,EAAgD,2BAAA,GAO1C,MAAMP,EAAyBP,CAAa,EACrD,KAAK,IAAM,CACV,MAAM,UAAU,EAChBC,EAAiB,MAAS,CAAA,CAC3B,EACA,MAAM,IAAM,CACX,MAAM,OAAO,CAAA,CACd,CAAA,EAGL,cACG,OAEC,CAAA,SAAA,CAAAH,EAAAA,IAAC,WAAQ,UAAU,aACjB,SAACA,MAAA,KAAA,CAAG,wBAAY,CAClB,CAAA,EAECA,MAAA,MAAA,CACC,SAACiB,EAAAA,KAAA,MAAA,CAAI,UAAU,OACb,SAAA,CAACjB,EAAA,IAAA,WAAA,CAEC,gBAAC,MACC,CAAA,SAAA,CAACiB,EAAAA,KAAA,MAAA,CAAI,UAAU,oCACb,SAAA,CAAAjB,EAAAA,IAAC,MAAG,SAAS,WAAA,CAAA,EACbA,EAAA,IAAC,SAAA,CACC,UAAW,sBACX,QAASe,EACV,SAAA,IAAA,CAED,CAAA,EACF,EAEAf,EAAA,IAACkB,EAAA,CACC,cAAAhB,EACA,iBAAAC,EACA,gBACEC,EAAgB,KAAOA,EAAgB,KAAO,CAAC,CAAA,CAEnD,CAAA,CAAA,CACF,CACF,CAAA,SAEC,WAEC,CAAA,SAAA,CAACa,EAAAA,KAAA,MAAA,CAAI,UAAU,6CACb,SAAA,CAAAjB,EAAAA,IAAC,QAAK,SAAS,WAAA,CAAA,EACdA,EAAA,IAAA,SAAA,CAAO,QAASc,EAAuB,SAAS,YAAA,CAAA,EACnD,QAEC,KAAG,EAAA,EAEJd,EAAA,IAAC,QAAA,CACC,MAAOW,EAAe,gBACtB,SAAWQ,GAAM,CACGP,EAAA,CAChB,GAAGD,EACH,gBAAiBQ,EAAE,cAAc,KAAA,CAClC,CACH,CAAA,CACD,CAAA,EACH,QAEC,KAAG,EAAA,EAEHf,GAAmBF,EACjBF,EAAA,IAAAoB,EAAA,CAAc,cAAAlB,CAA8B,CAAA,EAC3C,IAAA,CAAA,CACN,CACF,CAAA,QAECH,EAAO,EAAA,CACV,CAAA,CAAA,CAEJ,EAEA,SAASqB,EAAcC,EAA8B,CAC7C,KAAA,CAAE,cAAAnB,CAAkB,EAAAmB,EAEpB,CAACC,EAA0BC,CAAuB,EACtDf,EAAI,iCAAiC,EAEjC,CAACgB,EAAwBC,CAAqB,EAClDjB,EAAI,4BAA4B,EAE5B,CAACkB,EAAeC,CAAmB,EAAInB,EAAI,0BAA0B,EAErE,CAACoB,EAAkBC,CAAmB,EAAIhB,EAAA,SAC9C,CACE,cAAe,GACf,WAAY,GACZ,WAAY,MACd,CAAA,EAIIiB,EAAuB,MAAOC,GAAW,CACjC,MAAMT,EAAyBS,CAAE,EAAE,OAAO,CAAA,EAGlDC,EAAyB,MAAOD,GAAW,CAC3C,QAAQ,8BAA8B,IAC5B,MAAMP,EAAuBO,CAAE,EAC3CD,EAAqB5B,CAAa,EACpC,EAGI+B,EAAkB,SAAY,CAClC,MAAMC,EAA4B,CAChC,GAAGN,EACH,cAAe,OAAO1B,CAAa,CAAA,EAGzB,MAAMwB,EAAcQ,CAAI,EACpCJ,EAAqB5B,CAAa,CAAA,EAGpCiC,OAAAA,EAAAA,UAAU,IAAM,CACdL,EAAqB5B,CAAa,CAAA,EACjC,CAACA,CAAa,CAAC,EAGhBF,EAAAA,IAAC,WAEC,CAAA,SAAAiB,EAAAA,KAAC,MAEE,CAAA,SAAA,CAAwBM,EAAA,iBACtB,KAAI,CAAA,SAAA,CAAAA,EAAwB,KAAK,gBAAgB,QAAA,CAAA,CAAM,EACtD,KACHvB,MAAA,MAAA,CAAI,UAAU,+BACb,gBAAC,QACC,CAAA,SAAA,CAACA,EAAA,IAAA,QAAA,CACC,gBAAC,KACC,CAAA,SAAA,CAACA,EAAA,IAAA,KAAA,CAAG,UAAU,cAAc,SAAK,QAAA,EAChCA,EAAA,IAAA,KAAA,CAAG,UAAU,cAAc,SAAI,OAAA,EAC/BA,EAAA,IAAA,KAAA,CAAG,UAAU,cAAc,SAAM,IAAA,CAAA,CAAA,CACpC,CACF,CAAA,QACC,QACE,CAAA,SAAAuB,EAAwB,UAEpBvB,EAAAA,IAAAoC,EAAA,SAAA,CAAA,SAAAb,EAAwB,KAAK,kBAAkB,IAC7Cc,UAEI,KACC,CAAA,SAAA,CAAApB,OAAC,KACC,CAAA,SAAA,CAAAjB,EAAA,IAAC,MAAI,CAAA,UAAU,cAAe,SAAAqC,EAAK,WAAW,EAAO,GAAA,EACvD,EACArC,EAAAA,IAAC,MACC,SAACA,EAAAA,IAAA,MAAA,CAAI,UAAU,cAAe,SAAAqC,EAAK,WAAW,CAChD,CAAA,QACC,KACC,CAAA,SAAArC,EAAA,IAAC,SAAA,CACC,UAAU,wBACV,QAAS,IAAM,CACbgC,EAAuBK,EAAK,QAAQ,CACtC,EACD,SAAA,IAAA,CAAA,EAGH,CAAA,GAhBOA,EAAK,QAiBd,CAEJ,CAEJ,CAAA,EACE,KACN,CAAA,CAAA,CACF,CACF,CAAA,QAEC,KAAG,EAAA,EAEHd,EAAwB,UAErBN,EAAAA,KAAAmB,EAAA,SAAA,CAAA,SAAA,CAAAnB,OAAC,IAAG,CAAA,SAAA,CAAAM,EAAwB,KAAK,gBAAgB,WAAA,EAAS,EAGzDvB,MAAA,MAAA,CAAI,UAAU,gBAEb,gBAAC,MACC,CAAA,SAAA,CAAAA,EAAA,IAAC,QAAA,CACC,UAAU,OACV,MAAO4B,EAAiB,WACxB,SAAWT,GAAM,CACKU,EAAA,CAClB,GAAGD,EACH,WAAYT,EAAE,cAAc,KAAA,CAC7B,CACH,CAAA,CACD,EAEDF,EAAAA,KAAC,MAAI,CAAA,UAAU,gCACb,SAAA,CAACjB,EAAAA,IAAA,MAAA,CAAI,UAAU,sCACX,SAAA,CAAC,SAAU,MAAM,EAAmB,IAAKqC,GAEvCrC,EAAA,IAAC,SAAA,CAEC,UAAW,GACT4B,EAAiB,aAAeS,EAC5B,aACA,wBAEN,QAAS,IAAM,CACOR,EAAA,CAClB,GAAGD,EACH,WAAYS,CAAA,CACb,CACH,EAEC,SAAAA,CAAA,EAbIA,CAAA,CAgBV,EACH,QACC,SAAO,CAAA,UAAU,aAAa,QAASJ,EAAiB,SAEzD,QAAA,CAAA,EACF,CAAA,CAAA,CACF,CACF,CAAA,CAAA,CAAA,CACF,EACE,IAAA,CACN,CAAA,CACF,CAAA,CAEJ"}