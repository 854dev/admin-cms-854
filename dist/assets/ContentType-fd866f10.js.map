{"version":3,"file":"ContentType-fd866f10.js","sources":["../../src/layouts/partials/Footer.tsx","../../src/views/ContentType.tsx"],"sourcesContent":["const Footer = () => {\r\n  return (\r\n    <footer className=\"mt-auto\">\r\n      <div className=\"footer\">854-cms</div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import {\r\n  ChangeEventHandler,\r\n  MouseEventHandler,\r\n  useEffect,\r\n  useState,\r\n} from \"react\";\r\n\r\nimport Footer from \"layouts/partials/Footer\";\r\n\r\nimport { ContentBodySchema, ContentType, ID, schemaType } from \"types/common\";\r\nimport api from \"api/api_rtk\";\r\nimport { CreateBodySchemaDto } from \"types/dto\";\r\n\r\nconst ContentTypeManage = () => {\r\n  const [contentType, setcontentType] = useState<number>();\r\n\r\n  const {\r\n    data: contentTypeListData,\r\n    error: contentTypeListError,\r\n    isFetching: contentTypeListIsFetching,\r\n    isSuccess: contentTypeListSuccess,\r\n    refetch: contentTypeListRefetch,\r\n  } = api.useGetContentTypeListQuery(\r\n    {\r\n      page: 1,\r\n      limit: 50,\r\n    },\r\n    {\r\n      skip: false,\r\n      refetchOnMountOrArgChange: true,\r\n    }\r\n  );\r\n\r\n  const [addContentTypeTrigger, addContentTypeResult] =\r\n    api.usePostContentTypeMutation();\r\n\r\n  const [deleteContentTypeTrigger, deleteContentTypeResult] =\r\n    api.useDeleteContentTypeMutation();\r\n\r\n  const [contentTypeDto, setContentTypeDto] = useState({\r\n    contentTypeName: \"\",\r\n  });\r\n\r\n  const onChangeContentType: MouseEventHandler<HTMLButtonElement> = async (\r\n    e\r\n  ) => {\r\n    setcontentType(Number(e.currentTarget.value));\r\n  };\r\n\r\n  const onClickAddContentType = async () => {\r\n    const res = addContentTypeTrigger(contentTypeDto)\r\n      .then(() => {\r\n        alert(\"타입 추가 완료\");\r\n      })\r\n      .catch(() => {\r\n        alert(\"에러 발생\");\r\n      });\r\n  };\r\n\r\n  const onClickDeleteContentType = async () => {\r\n    if (\r\n      !contentType ||\r\n      !confirm(\"해당 타입의 콘텐츠 전체가 삭제됩니다. 진짜 삭제?\")\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const res = await deleteContentTypeTrigger(contentType)\r\n      .then(() => {\r\n        alert(\"타입 삭제 완료\");\r\n        setcontentType(undefined);\r\n      })\r\n      .catch(() => {\r\n        alert(\"에러 발생\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      {/* Breadcrumb */}\r\n      <section className=\"breadcrumb\">\r\n        <h1>Content Type</h1>\r\n      </section>\r\n\r\n      <div>\r\n        <div className=\"grid\">\r\n          <fieldset>\r\n            {/* content type Select */}\r\n            <div>\r\n              <div className=\"flex items-center justify-between\">\r\n                <h3>콘텐츠 타입 선택</h3>\r\n                <button\r\n                  className={\"bg-error text-white\"}\r\n                  onClick={onClickDeleteContentType}\r\n                >\r\n                  삭제\r\n                </button>\r\n              </div>\r\n\r\n              <div>\r\n                {contentTypeListData ? (\r\n                  <>\r\n                    {contentTypeListData.data.map((elem: ContentType) => (\r\n                      <button\r\n                        className={\r\n                          contentType === elem.contentTypeId\r\n                            ? \"bg-primary text-white\"\r\n                            : \"\"\r\n                        }\r\n                        key={elem.contentTypeId}\r\n                        value={elem.contentTypeId}\r\n                        onClick={onChangeContentType}\r\n                      >\r\n                        {elem.contentTypeName}\r\n                      </button>\r\n                    ))}\r\n                  </>\r\n                ) : null}\r\n              </div>\r\n            </div>\r\n          </fieldset>\r\n\r\n          <fieldset>\r\n            {/* content type Add */}\r\n            <div className=\"flex flex-row items-center justify-between\">\r\n              <span>콘텐츠 타입 이름</span>\r\n              <button onClick={onClickAddContentType}>콘텐츠 타입 추가</button>\r\n            </div>\r\n\r\n            <hr />\r\n\r\n            <input\r\n              value={contentTypeDto.contentTypeName}\r\n              onChange={(e) => {\r\n                setContentTypeDto({\r\n                  ...contentTypeDto,\r\n                  contentTypeName: e.currentTarget.value,\r\n                });\r\n              }}\r\n            ></input>\r\n          </fieldset>\r\n\r\n          <hr />\r\n\r\n          {contentTypeListData && contentType ? (\r\n            <FormBodyField contentTypeId={contentType}></FormBodyField>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n\r\n      <Footer />\r\n    </main>\r\n  );\r\n};\r\n\r\nfunction FormBodyField(props: { contentTypeId: ID }) {\r\n  const { contentTypeId } = props;\r\n\r\n  const [contentTypeDetailTrigger, contentTypeDetailResult] =\r\n    api.useLazyGetContentTypeDetailQuery();\r\n\r\n  const [bodyFieldDeleteTrigger, bodyFieldDeleteResult] =\r\n    api.useDeleteBodySchemaMutation();\r\n\r\n  const [postBodyField, postBodyFieldResult] = api.usePostBodySchemaMutation();\r\n\r\n  const [postBodyFieldDto, setPostBodyFieldDto] = useState<CreateBodySchemaDto>(\r\n    {\r\n      contentTypeId: -1,\r\n      schemaName: \"\",\r\n      schemaType: \"text\",\r\n    }\r\n  );\r\n\r\n  /** FUNCTION */\r\n  const getContentTypeDetail = async (id: ID) => {\r\n    const res = await contentTypeDetailTrigger(id).unwrap();\r\n  };\r\n\r\n  const onClickDeleteBodyField = async (id: ID) => {\r\n    if (confirm(\"해당 필드의 데이터가 전부 삭제됩니다. 진짜 삭제?\")) {\r\n      const res = await bodyFieldDeleteTrigger(id);\r\n      getContentTypeDetail(contentTypeId);\r\n    }\r\n  };\r\n\r\n  const onClickAddField = async () => {\r\n    const body: CreateBodySchemaDto = {\r\n      ...postBodyFieldDto,\r\n      contentTypeId: Number(contentTypeId),\r\n    };\r\n\r\n    const res = await postBodyField(body);\r\n    getContentTypeDetail(contentTypeId);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getContentTypeDetail(contentTypeId);\r\n  }, [contentTypeId]);\r\n\r\n  return (\r\n    <fieldset>\r\n      {/* manage body field */}\r\n      <div>\r\n        {/* field table */}\r\n        {contentTypeDetailResult.isSuccess ? (\r\n          <h3>{contentTypeDetailResult.data.contentTypeName} 필드 관리</h3>\r\n        ) : null}\r\n        <div className=\"flex flex-row justify-center\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th className=\"text-center\">필드 타입</th>\r\n                <th className=\"text-center\">필드 명</th>\r\n                <th className=\"text-center\">&nbsp;</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {contentTypeDetailResult.isSuccess ? (\r\n                <>\r\n                  {contentTypeDetailResult.data.contentBodySchema.map(\r\n                    (elem: ContentBodySchema) => {\r\n                      return (\r\n                        <tr key={elem.schemaId}>\r\n                          <td>\r\n                            <div className=\"text-center\">{elem.schemaType}</div>{\" \"}\r\n                          </td>\r\n                          <td>\r\n                            <div className=\"text-center\">{elem.schemaName}</div>\r\n                          </td>\r\n                          <td>\r\n                            <button\r\n                              className=\"bg-danger text-center\"\r\n                              onClick={() => {\r\n                                onClickDeleteBodyField(elem.schemaId);\r\n                              }}\r\n                            >\r\n                              삭제\r\n                            </button>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    }\r\n                  )}\r\n                </>\r\n              ) : null}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <hr />\r\n\r\n        {contentTypeDetailResult.isSuccess ? (\r\n          <>\r\n            <p>{contentTypeDetailResult.data.contentTypeName} 타입 필드 추가</p>\r\n\r\n            {/* add field */}\r\n            <div className=\"flex flex-col\">\r\n              {/* schemaType 중 하나 */}\r\n              <div>\r\n                <input\r\n                  className=\"mb-4\"\r\n                  value={postBodyFieldDto.schemaName}\r\n                  onChange={(e) => {\r\n                    setPostBodyFieldDto({\r\n                      ...postBodyFieldDto,\r\n                      schemaName: e.currentTarget.value,\r\n                    });\r\n                  }}\r\n                ></input>\r\n\r\n                <div className=\"flex flex-row justify-between\">\r\n                  <div className=\"flex flex-row justify-between gap-4\">\r\n                    {([\"string\", \"text\"] as schemaType[]).map((elem) => {\r\n                      return (\r\n                        <button\r\n                          key={elem}\r\n                          className={`${\r\n                            postBodyFieldDto.schemaType === elem\r\n                              ? \"bg-primary\"\r\n                              : \"bg-gray-200\"\r\n                          } text-sm`}\r\n                          onClick={() => {\r\n                            setPostBodyFieldDto({\r\n                              ...postBodyFieldDto,\r\n                              schemaType: elem,\r\n                            });\r\n                          }}\r\n                        >\r\n                          {elem}\r\n                        </button>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                  <button className=\"bg-primary\" onClick={onClickAddField}>\r\n                    필드 추가\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </>\r\n        ) : null}\r\n      </div>\r\n    </fieldset>\r\n  );\r\n}\r\n\r\nexport default ContentTypeManage;\r\n"],"names":["Footer","jsx","ContentTypeManage","contentType","setcontentType","useState","contentTypeListData","contentTypeListError","contentTypeListIsFetching","contentTypeListSuccess","contentTypeListRefetch","api","addContentTypeTrigger","addContentTypeResult","deleteContentTypeTrigger","deleteContentTypeResult","contentTypeDto","setContentTypeDto","onChangeContentType","e","onClickAddContentType","onClickDeleteContentType","jsxs","Fragment","elem","FormBodyField","props","contentTypeId","contentTypeDetailTrigger","contentTypeDetailResult","bodyFieldDeleteTrigger","bodyFieldDeleteResult","postBodyField","postBodyFieldResult","postBodyFieldDto","setPostBodyFieldDto","getContentTypeDetail","id","onClickDeleteBodyField","onClickAddField","body","useEffect"],"mappings":"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"}